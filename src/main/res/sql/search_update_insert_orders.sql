INSERT INTO TMP_SELL_ORDERS (ORDER_PK, ORDER_ID, LOCATION_ID, LOCATION_SECURITY, PRICE, VOLUME,MIN_VOLUME, TYPE_ID)
SELECT ORDER_PK, ORDER_ID, LOCATION_ID, TMP_STATIONS.SECURITY_STATUS, PRICE, VOLUME_REMAIN, MIN_VOLUME, CACHED_ORDER.TYPE_ID
	FROM CACHED_ORDER
	INNER JOIN TMP_STATIONS
	ON TMP_STATIONS.STATION_ID = CACHED_ORDER.LOCATION_ID
	INNER JOIN CACHED_MARKET_PRICE
	ON CACHED_ORDER.TYPE_ID = CACHED_MARKET_PRICE.TYPE_ID
	AND CACHED_ORDER.PRICE < (CACHED_MARKET_PRICE.AVERAGE_PRICE * 2)
	WHERE CACHED_ORDER.BUY_ORDER = FALSE
	AND VOLUME_REMAIN > 1;

INSERT INTO TMP_AVAL_VOLUMES (TYPE_ID, VOLUME_AVALIABLE)
SELECT TYPE_ID, SUM(VOLUME)
    FROM TMP_SELL_ORDERS
    GROUP BY TYPE_ID;

INSERT INTO TMP_BUY_ORDERS (ORDER_PK, ORDER_ID, LOCATION_ID, LOCATION_SECURITY, PRICE, VOLUME, MIN_VOLUME, TYPE_ID)
SELECT ORDER_PK, ORDER_ID, LOCATION_ID, TMP_STATIONS.SECURITY_STATUS, PRICE, VOLUME_REMAIN, MIN_VOLUME, CACHED_ORDER.TYPE_ID
	FROM CACHED_ORDER
	INNER JOIN TMP_STATIONS
	ON TMP_STATIONS.STATION_ID = CACHED_ORDER.LOCATION_ID
	INNER JOIN CACHED_MARKET_PRICE
	ON CACHED_ORDER.TYPE_ID = CACHED_MARKET_PRICE.TYPE_ID
	WHERE CACHED_ORDER.BUY_ORDER = TRUE
	AND VOLUME_REMAIN > 1;