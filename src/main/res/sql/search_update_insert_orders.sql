INSERT INTO TMP_SELL_ORDERS (ORDER_PK, ORDER_ID, LOCATION_ID, PRICE, VOLUME,MIN_VOLUME, TYPE_ID)
SELECT ORDER_PK, ORDER_ID, LOCATION_ID, PRICE, VOLUME_REMAIN, MIN_VOLUME, ORDER_SEARCH_CACHE.TYPE_ID
	FROM ORDER_SEARCH_CACHE
	INNER JOIN TMP_STATIONS
	ON TMP_STATIONS.STATION_ID = ORDER_SEARCH_CACHE.LOCATION_ID
	INNER JOIN MARKET_PRICE_CACHE
	ON ORDER_SEARCH_CACHE.TYPE_ID = MARKET_PRICE_CACHE.TYPE_ID
	AND ORDER_SEARCH_CACHE.PRICE < (MARKET_PRICE_CACHE.AVERAGE_PRICE * 2)
	WHERE ORDER_SEARCH_CACHE.BUY_ORDER = FALSE
	AND VOLUME_REMAIN > 1;

INSERT INTO TMP_AVAL_VOLUMES (TYPE_ID, VOLUME_AVALIABLE)
SELECT TYPE_ID, SUM(VOLUME)
    FROM TMP_SELL_ORDERS
    GROUP BY TYPE_ID;

INSERT INTO TMP_BUY_ORDERS (ORDER_PK, ORDER_ID, LOCATION_ID, PRICE, VOLUME, MIN_VOLUME, TYPE_ID)
SELECT ORDER_PK, ORDER_ID, LOCATION_ID, PRICE, VOLUME_REMAIN, MIN_VOLUME, ORDER_SEARCH_CACHE.TYPE_ID
	FROM ORDER_SEARCH_CACHE
	INNER JOIN TMP_STATIONS
	ON TMP_STATIONS.STATION_ID = ORDER_SEARCH_CACHE.LOCATION_ID
	INNER JOIN MARKET_PRICE_CACHE
	ON ORDER_SEARCH_CACHE.TYPE_ID = MARKET_PRICE_CACHE.TYPE_ID
	WHERE ORDER_SEARCH_CACHE.BUY_ORDER = TRUE
	AND VOLUME_REMAIN > 1;